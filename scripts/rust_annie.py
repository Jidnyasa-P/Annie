# Stub file for type hints
import numpy as np
from typing import Tuple, List, Callable

class Distance:
    EUCLIDEAN: Distance
    COSINE: Distance
    MANHATTAN: Distance
    CHEBYSHEV: Distance

class AnnIndex:
    def __init__(self, dim: int, metric: Distance) -> None: ...
    @staticmethod
    def new_minkowski(dim: int, p: float) -> AnnIndex: ...
    def add(self, data: np.ndarray, ids: np.ndarray) -> None: ...
    def remove(self, ids: List[int]) -> None: ...
    def search(self, query: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]: ...
    def search_batch(self, queries: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]: ...
    def save(self, path: str) -> None: ...
    @staticmethod
    def load(path: str) -> AnnIndex: ...
    def search_filter_py(
        self, 
        query: np.ndarray, 
        k: int, 
        filter_fn: Callable[[int], bool]
    ) -> Tuple[np.ndarray, np.ndarray]: ...

class PyHnswIndex:
    def __init__(self, dims: int) -> None: ...
    def add(self, data: np.ndarray, ids: np.ndarray) -> None: ...
    def search(self, vector: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]: ...
    def save(self, path: str) -> None: ...
    @staticmethod
    def load(path: str) -> PyHnswIndex: ...

class ThreadSafeAnnIndex:
    def __init__(self, dim: int, metric: Distance) -> None: ...
    def add(self, data: np.ndarray, ids: np.ndarray) -> None: ...
    def remove(self, ids: List[int]) -> None: ...
    def search(self, query: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]: ...
    def search_batch(self, queries: np.ndarray, k: int) -> Tuple[np.ndarray, np.ndarray]: ...
    def save(self, path: str) -> None: ...
    @staticmethod
    def load(path: str) -> ThreadSafeAnnIndex: ...
